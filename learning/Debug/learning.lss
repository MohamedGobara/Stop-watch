
learning.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d58  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000003c  00800060  00000d58  00000dec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000018  0080009c  0080009c  00000e28  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e28  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000e58  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003f0  00000000  00000000  00000e94  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002ceb  00000000  00000000  00001284  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fe1  00000000  00000000  00003f6f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001aea  00000000  00000000  00004f50  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ba0  00000000  00000000  00006a3c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000139d  00000000  00000000  000075dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002247  00000000  00000000  00008979  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000358  00000000  00000000  0000abc0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 7d 04 	jmp	0x8fa	; 0x8fa <__vector_1>
   8:	0c 94 a6 04 	jmp	0x94c	; 0x94c <__vector_2>
   c:	0c 94 cf 04 	jmp	0x99e	; 0x99e <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 ee 05 	jmp	0xbdc	; 0xbdc <__vector_5>
  18:	0c 94 c5 05 	jmp	0xb8a	; 0xb8a <__vector_6>
  1c:	0c 94 73 05 	jmp	0xae6	; 0xae6 <__vector_7>
  20:	0c 94 9c 05 	jmp	0xb38	; 0xb38 <__vector_8>
  24:	0c 94 4a 05 	jmp	0xa94	; 0xa94 <__vector_9>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 21 05 	jmp	0xa42	; 0xa42 <__vector_11>
  30:	0c 94 f8 04 	jmp	0x9f0	; 0x9f0 <__vector_12>
  34:	0c 94 40 06 	jmp	0xc80	; 0xc80 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 17 06 	jmp	0xc2e	; 0xc2e <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 e5       	ldi	r30, 0x58	; 88
  68:	fd e0       	ldi	r31, 0x0D	; 13
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ac 39       	cpi	r26, 0x9C	; 156
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	ac e9       	ldi	r26, 0x9C	; 156
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 3b       	cpi	r26, 0xB4	; 180
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <main>
  8a:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <MOVE_Init>:

#define F_CPU 8000000
#include <util/delay.h>


void MOVE_Init(void){
  92:	cf 93       	push	r28

		
		for (s8 i = 5 ;  i>=0  ; i--)
  94:	c5 e0       	ldi	r28, 0x05	; 5
  96:	1e c0       	rjmp	.+60     	; 0xd4 <MOVE_Init+0x42>
		{
			LCD_GoTo(0,0) ; 
  98:	60 e0       	ldi	r22, 0x00	; 0
  9a:	80 e0       	ldi	r24, 0x00	; 0
  9c:	0e 94 cc 01 	call	0x398	; 0x398 <LCD_GoTo>
			LCD_WriteString("Start after : ") ; 
  a0:	80 e8       	ldi	r24, 0x80	; 128
  a2:	90 e0       	ldi	r25, 0x00	; 0
  a4:	0e 94 bf 01 	call	0x37e	; 0x37e <LCD_WriteString>
			LCD_WriteNumber(i) ; 
  a8:	6c 2f       	mov	r22, r28
  aa:	0c 2e       	mov	r0, r28
  ac:	00 0c       	add	r0, r0
  ae:	77 0b       	sbc	r23, r23
  b0:	88 0b       	sbc	r24, r24
  b2:	99 0b       	sbc	r25, r25
  b4:	0e 94 56 01 	call	0x2ac	; 0x2ac <LCD_WriteNumber>
			LCD_WriteString("      ") ;
  b8:	8f e8       	ldi	r24, 0x8F	; 143
  ba:	90 e0       	ldi	r25, 0x00	; 0
  bc:	0e 94 bf 01 	call	0x37e	; 0x37e <LCD_WriteString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  c0:	2f ef       	ldi	r18, 0xFF	; 255
  c2:	89 e6       	ldi	r24, 0x69	; 105
  c4:	98 e1       	ldi	r25, 0x18	; 24
  c6:	21 50       	subi	r18, 0x01	; 1
  c8:	80 40       	sbci	r24, 0x00	; 0
  ca:	90 40       	sbci	r25, 0x00	; 0
  cc:	e1 f7       	brne	.-8      	; 0xc6 <MOVE_Init+0x34>
  ce:	00 c0       	rjmp	.+0      	; 0xd0 <MOVE_Init+0x3e>
  d0:	00 00       	nop


void MOVE_Init(void){

		
		for (s8 i = 5 ;  i>=0  ; i--)
  d2:	c1 50       	subi	r28, 0x01	; 1
  d4:	cc 23       	and	r28, r28
  d6:	04 f7       	brge	.-64     	; 0x98 <MOVE_Init+0x6>
			LCD_WriteString("Start after : ") ; 
			LCD_WriteNumber(i) ; 
			LCD_WriteString("      ") ;
			_delay_ms(1000) ; 
		}
		LCD_Clear() ; 
  d8:	0e 94 52 01 	call	0x2a4	; 0x2a4 <LCD_Clear>

}
  dc:	cf 91       	pop	r28
  de:	08 95       	ret

000000e0 <WriteInsterction>:

}

void LCD_ReturnHome(void) {
	
	WriteInsterction(0x02) ;
  e0:	cf 93       	push	r28
  e2:	c8 2f       	mov	r28, r24
  e4:	60 e0       	ldi	r22, 0x00	; 0
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <DIO_WritePin>
  ec:	6c 2f       	mov	r22, r28
  ee:	66 1f       	adc	r22, r22
  f0:	66 27       	eor	r22, r22
  f2:	66 1f       	adc	r22, r22
  f4:	86 e0       	ldi	r24, 0x06	; 6
  f6:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <DIO_WritePin>
  fa:	c6 fb       	bst	r28, 6
  fc:	66 27       	eor	r22, r22
  fe:	60 f9       	bld	r22, 0
 100:	85 e0       	ldi	r24, 0x05	; 5
 102:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <DIO_WritePin>
 106:	c5 fb       	bst	r28, 5
 108:	66 27       	eor	r22, r22
 10a:	60 f9       	bld	r22, 0
 10c:	84 e0       	ldi	r24, 0x04	; 4
 10e:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <DIO_WritePin>
 112:	c4 fb       	bst	r28, 4
 114:	66 27       	eor	r22, r22
 116:	60 f9       	bld	r22, 0
 118:	83 e0       	ldi	r24, 0x03	; 3
 11a:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <DIO_WritePin>
 11e:	61 e0       	ldi	r22, 0x01	; 1
 120:	82 e0       	ldi	r24, 0x02	; 2
 122:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <DIO_WritePin>
 126:	8f ec       	ldi	r24, 0xCF	; 207
 128:	97 e0       	ldi	r25, 0x07	; 7
 12a:	01 97       	sbiw	r24, 0x01	; 1
 12c:	f1 f7       	brne	.-4      	; 0x12a <WriteInsterction+0x4a>
 12e:	00 c0       	rjmp	.+0      	; 0x130 <WriteInsterction+0x50>
 130:	00 00       	nop
 132:	60 e0       	ldi	r22, 0x00	; 0
 134:	82 e0       	ldi	r24, 0x02	; 2
 136:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <DIO_WritePin>
 13a:	8f ec       	ldi	r24, 0xCF	; 207
 13c:	97 e0       	ldi	r25, 0x07	; 7
 13e:	01 97       	sbiw	r24, 0x01	; 1
 140:	f1 f7       	brne	.-4      	; 0x13e <WriteInsterction+0x5e>
 142:	00 c0       	rjmp	.+0      	; 0x144 <WriteInsterction+0x64>
 144:	00 00       	nop
 146:	c3 fb       	bst	r28, 3
 148:	66 27       	eor	r22, r22
 14a:	60 f9       	bld	r22, 0
 14c:	86 e0       	ldi	r24, 0x06	; 6
 14e:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <DIO_WritePin>
 152:	c2 fb       	bst	r28, 2
 154:	66 27       	eor	r22, r22
 156:	60 f9       	bld	r22, 0
 158:	85 e0       	ldi	r24, 0x05	; 5
 15a:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <DIO_WritePin>
 15e:	c1 fb       	bst	r28, 1
 160:	66 27       	eor	r22, r22
 162:	60 f9       	bld	r22, 0
 164:	84 e0       	ldi	r24, 0x04	; 4
 166:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <DIO_WritePin>
 16a:	6c 2f       	mov	r22, r28
 16c:	61 70       	andi	r22, 0x01	; 1
 16e:	83 e0       	ldi	r24, 0x03	; 3
 170:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <DIO_WritePin>
 174:	61 e0       	ldi	r22, 0x01	; 1
 176:	82 e0       	ldi	r24, 0x02	; 2
 178:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <DIO_WritePin>
 17c:	8f ec       	ldi	r24, 0xCF	; 207
 17e:	97 e0       	ldi	r25, 0x07	; 7
 180:	01 97       	sbiw	r24, 0x01	; 1
 182:	f1 f7       	brne	.-4      	; 0x180 <WriteInsterction+0xa0>
 184:	00 c0       	rjmp	.+0      	; 0x186 <WriteInsterction+0xa6>
 186:	00 00       	nop
 188:	60 e0       	ldi	r22, 0x00	; 0
 18a:	82 e0       	ldi	r24, 0x02	; 2
 18c:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <DIO_WritePin>
 190:	8f ec       	ldi	r24, 0xCF	; 207
 192:	97 e0       	ldi	r25, 0x07	; 7
 194:	01 97       	sbiw	r24, 0x01	; 1
 196:	f1 f7       	brne	.-4      	; 0x194 <WriteInsterction+0xb4>
 198:	00 c0       	rjmp	.+0      	; 0x19a <WriteInsterction+0xba>
 19a:	00 00       	nop
 19c:	cf 91       	pop	r28
 19e:	08 95       	ret

000001a0 <WriteData>:
 1a0:	cf 93       	push	r28
 1a2:	c8 2f       	mov	r28, r24
 1a4:	61 e0       	ldi	r22, 0x01	; 1
 1a6:	81 e0       	ldi	r24, 0x01	; 1
 1a8:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <DIO_WritePin>
 1ac:	6c 2f       	mov	r22, r28
 1ae:	66 1f       	adc	r22, r22
 1b0:	66 27       	eor	r22, r22
 1b2:	66 1f       	adc	r22, r22
 1b4:	86 e0       	ldi	r24, 0x06	; 6
 1b6:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <DIO_WritePin>
 1ba:	c6 fb       	bst	r28, 6
 1bc:	66 27       	eor	r22, r22
 1be:	60 f9       	bld	r22, 0
 1c0:	85 e0       	ldi	r24, 0x05	; 5
 1c2:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <DIO_WritePin>
 1c6:	c5 fb       	bst	r28, 5
 1c8:	66 27       	eor	r22, r22
 1ca:	60 f9       	bld	r22, 0
 1cc:	84 e0       	ldi	r24, 0x04	; 4
 1ce:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <DIO_WritePin>
 1d2:	c4 fb       	bst	r28, 4
 1d4:	66 27       	eor	r22, r22
 1d6:	60 f9       	bld	r22, 0
 1d8:	83 e0       	ldi	r24, 0x03	; 3
 1da:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <DIO_WritePin>
 1de:	61 e0       	ldi	r22, 0x01	; 1
 1e0:	82 e0       	ldi	r24, 0x02	; 2
 1e2:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <DIO_WritePin>
 1e6:	8f ec       	ldi	r24, 0xCF	; 207
 1e8:	97 e0       	ldi	r25, 0x07	; 7
 1ea:	01 97       	sbiw	r24, 0x01	; 1
 1ec:	f1 f7       	brne	.-4      	; 0x1ea <WriteData+0x4a>
 1ee:	00 c0       	rjmp	.+0      	; 0x1f0 <WriteData+0x50>
 1f0:	00 00       	nop
 1f2:	60 e0       	ldi	r22, 0x00	; 0
 1f4:	82 e0       	ldi	r24, 0x02	; 2
 1f6:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <DIO_WritePin>
 1fa:	8f ec       	ldi	r24, 0xCF	; 207
 1fc:	97 e0       	ldi	r25, 0x07	; 7
 1fe:	01 97       	sbiw	r24, 0x01	; 1
 200:	f1 f7       	brne	.-4      	; 0x1fe <WriteData+0x5e>
 202:	00 c0       	rjmp	.+0      	; 0x204 <WriteData+0x64>
 204:	00 00       	nop
 206:	c3 fb       	bst	r28, 3
 208:	66 27       	eor	r22, r22
 20a:	60 f9       	bld	r22, 0
 20c:	86 e0       	ldi	r24, 0x06	; 6
 20e:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <DIO_WritePin>
 212:	c2 fb       	bst	r28, 2
 214:	66 27       	eor	r22, r22
 216:	60 f9       	bld	r22, 0
 218:	85 e0       	ldi	r24, 0x05	; 5
 21a:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <DIO_WritePin>
 21e:	c1 fb       	bst	r28, 1
 220:	66 27       	eor	r22, r22
 222:	60 f9       	bld	r22, 0
 224:	84 e0       	ldi	r24, 0x04	; 4
 226:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <DIO_WritePin>
 22a:	6c 2f       	mov	r22, r28
 22c:	61 70       	andi	r22, 0x01	; 1
 22e:	83 e0       	ldi	r24, 0x03	; 3
 230:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <DIO_WritePin>
 234:	61 e0       	ldi	r22, 0x01	; 1
 236:	82 e0       	ldi	r24, 0x02	; 2
 238:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <DIO_WritePin>
 23c:	8f ec       	ldi	r24, 0xCF	; 207
 23e:	97 e0       	ldi	r25, 0x07	; 7
 240:	01 97       	sbiw	r24, 0x01	; 1
 242:	f1 f7       	brne	.-4      	; 0x240 <WriteData+0xa0>
 244:	00 c0       	rjmp	.+0      	; 0x246 <WriteData+0xa6>
 246:	00 00       	nop
 248:	60 e0       	ldi	r22, 0x00	; 0
 24a:	82 e0       	ldi	r24, 0x02	; 2
 24c:	0e 94 7c 03 	call	0x6f8	; 0x6f8 <DIO_WritePin>
 250:	8f ec       	ldi	r24, 0xCF	; 207
 252:	97 e0       	ldi	r25, 0x07	; 7
 254:	01 97       	sbiw	r24, 0x01	; 1
 256:	f1 f7       	brne	.-4      	; 0x254 <WriteData+0xb4>
 258:	00 c0       	rjmp	.+0      	; 0x25a <WriteData+0xba>
 25a:	00 00       	nop
 25c:	cf 91       	pop	r28
 25e:	08 95       	ret

00000260 <LCD_Init>:
 260:	2f e7       	ldi	r18, 0x7F	; 127
 262:	88 e3       	ldi	r24, 0x38	; 56
 264:	91 e0       	ldi	r25, 0x01	; 1
 266:	21 50       	subi	r18, 0x01	; 1
 268:	80 40       	sbci	r24, 0x00	; 0
 26a:	90 40       	sbci	r25, 0x00	; 0
 26c:	e1 f7       	brne	.-8      	; 0x266 <LCD_Init+0x6>
 26e:	00 c0       	rjmp	.+0      	; 0x270 <LCD_Init+0x10>
 270:	00 00       	nop
 272:	82 e0       	ldi	r24, 0x02	; 2
 274:	0e 94 70 00 	call	0xe0	; 0xe0 <WriteInsterction>
 278:	88 e2       	ldi	r24, 0x28	; 40
 27a:	0e 94 70 00 	call	0xe0	; 0xe0 <WriteInsterction>
 27e:	8c e0       	ldi	r24, 0x0C	; 12
 280:	0e 94 70 00 	call	0xe0	; 0xe0 <WriteInsterction>
 284:	81 e0       	ldi	r24, 0x01	; 1
 286:	0e 94 70 00 	call	0xe0	; 0xe0 <WriteInsterction>
 28a:	8f ec       	ldi	r24, 0xCF	; 207
 28c:	97 e0       	ldi	r25, 0x07	; 7
 28e:	01 97       	sbiw	r24, 0x01	; 1
 290:	f1 f7       	brne	.-4      	; 0x28e <LCD_Init+0x2e>
 292:	00 c0       	rjmp	.+0      	; 0x294 <LCD_Init+0x34>
 294:	00 00       	nop
 296:	86 e0       	ldi	r24, 0x06	; 6
 298:	0e 94 70 00 	call	0xe0	; 0xe0 <WriteInsterction>
 29c:	08 95       	ret

0000029e <LCD_WriteChar>:
 29e:	0e 94 d0 00 	call	0x1a0	; 0x1a0 <WriteData>
 2a2:	08 95       	ret

000002a4 <LCD_Clear>:
 2a4:	81 e0       	ldi	r24, 0x01	; 1
 2a6:	0e 94 70 00 	call	0xe0	; 0xe0 <WriteInsterction>
 2aa:	08 95       	ret

000002ac <LCD_WriteNumber>:
 2ac:	cf 92       	push	r12
 2ae:	df 92       	push	r13
 2b0:	ef 92       	push	r14
 2b2:	ff 92       	push	r15
 2b4:	0f 93       	push	r16
 2b6:	1f 93       	push	r17
 2b8:	cf 93       	push	r28
 2ba:	df 93       	push	r29
 2bc:	cd b7       	in	r28, 0x3d	; 61
 2be:	de b7       	in	r29, 0x3e	; 62
 2c0:	60 97       	sbiw	r28, 0x10	; 16
 2c2:	0f b6       	in	r0, 0x3f	; 63
 2c4:	f8 94       	cli
 2c6:	de bf       	out	0x3e, r29	; 62
 2c8:	0f be       	out	0x3f, r0	; 63
 2ca:	cd bf       	out	0x3d, r28	; 61
 2cc:	6b 01       	movw	r12, r22
 2ce:	7c 01       	movw	r14, r24
 2d0:	67 2b       	or	r22, r23
 2d2:	68 2b       	or	r22, r24
 2d4:	69 2b       	or	r22, r25
 2d6:	19 f4       	brne	.+6      	; 0x2de <LCD_WriteNumber+0x32>
 2d8:	80 e3       	ldi	r24, 0x30	; 48
 2da:	0e 94 4f 01 	call	0x29e	; 0x29e <LCD_WriteChar>
 2de:	ff 20       	and	r15, r15
 2e0:	54 f4       	brge	.+20     	; 0x2f6 <LCD_WriteNumber+0x4a>
 2e2:	f0 94       	com	r15
 2e4:	e0 94       	com	r14
 2e6:	d0 94       	com	r13
 2e8:	c0 94       	com	r12
 2ea:	c1 1c       	adc	r12, r1
 2ec:	d1 1c       	adc	r13, r1
 2ee:	e1 1c       	adc	r14, r1
 2f0:	f1 1c       	adc	r15, r1
 2f2:	01 e0       	ldi	r16, 0x01	; 1
 2f4:	01 c0       	rjmp	.+2      	; 0x2f8 <LCD_WriteNumber+0x4c>
 2f6:	00 e0       	ldi	r16, 0x00	; 0
 2f8:	10 e0       	ldi	r17, 0x00	; 0
 2fa:	15 c0       	rjmp	.+42     	; 0x326 <LCD_WriteNumber+0x7a>
 2fc:	c7 01       	movw	r24, r14
 2fe:	b6 01       	movw	r22, r12
 300:	2a e0       	ldi	r18, 0x0A	; 10
 302:	30 e0       	ldi	r19, 0x00	; 0
 304:	40 e0       	ldi	r20, 0x00	; 0
 306:	50 e0       	ldi	r21, 0x00	; 0
 308:	0e 94 8b 06 	call	0xd16	; 0xd16 <__divmodsi4>
 30c:	e1 e0       	ldi	r30, 0x01	; 1
 30e:	f0 e0       	ldi	r31, 0x00	; 0
 310:	ec 0f       	add	r30, r28
 312:	fd 1f       	adc	r31, r29
 314:	e1 0f       	add	r30, r17
 316:	f1 1d       	adc	r31, r1
 318:	60 5d       	subi	r22, 0xD0	; 208
 31a:	60 83       	st	Z, r22
 31c:	c2 2e       	mov	r12, r18
 31e:	d3 2e       	mov	r13, r19
 320:	e4 2e       	mov	r14, r20
 322:	f5 2e       	mov	r15, r21
 324:	1f 5f       	subi	r17, 0xFF	; 255
 326:	c1 14       	cp	r12, r1
 328:	d1 04       	cpc	r13, r1
 32a:	e1 04       	cpc	r14, r1
 32c:	f1 04       	cpc	r15, r1
 32e:	31 f7       	brne	.-52     	; 0x2fc <LCD_WriteNumber+0x50>
 330:	01 30       	cpi	r16, 0x01	; 1
 332:	19 f4       	brne	.+6      	; 0x33a <LCD_WriteNumber+0x8e>
 334:	8d e2       	ldi	r24, 0x2D	; 45
 336:	0e 94 4f 01 	call	0x29e	; 0x29e <LCD_WriteChar>
 33a:	f1 2e       	mov	r15, r17
 33c:	0f c0       	rjmp	.+30     	; 0x35c <LCD_WriteNumber+0xb0>
 33e:	ef 2d       	mov	r30, r15
 340:	0f 2c       	mov	r0, r15
 342:	00 0c       	add	r0, r0
 344:	ff 0b       	sbc	r31, r31
 346:	31 97       	sbiw	r30, 0x01	; 1
 348:	81 e0       	ldi	r24, 0x01	; 1
 34a:	90 e0       	ldi	r25, 0x00	; 0
 34c:	8c 0f       	add	r24, r28
 34e:	9d 1f       	adc	r25, r29
 350:	e8 0f       	add	r30, r24
 352:	f9 1f       	adc	r31, r25
 354:	80 81       	ld	r24, Z
 356:	0e 94 4f 01 	call	0x29e	; 0x29e <LCD_WriteChar>
 35a:	fa 94       	dec	r15
 35c:	1f 14       	cp	r1, r15
 35e:	7c f3       	brlt	.-34     	; 0x33e <LCD_WriteNumber+0x92>
 360:	60 96       	adiw	r28, 0x10	; 16
 362:	0f b6       	in	r0, 0x3f	; 63
 364:	f8 94       	cli
 366:	de bf       	out	0x3e, r29	; 62
 368:	0f be       	out	0x3f, r0	; 63
 36a:	cd bf       	out	0x3d, r28	; 61
 36c:	df 91       	pop	r29
 36e:	cf 91       	pop	r28
 370:	1f 91       	pop	r17
 372:	0f 91       	pop	r16
 374:	ff 90       	pop	r15
 376:	ef 90       	pop	r14
 378:	df 90       	pop	r13
 37a:	cf 90       	pop	r12
 37c:	08 95       	ret

0000037e <LCD_WriteString>:
 37e:	cf 93       	push	r28
 380:	df 93       	push	r29
 382:	ec 01       	movw	r28, r24
 384:	03 c0       	rjmp	.+6      	; 0x38c <LCD_WriteString+0xe>
 386:	0e 94 4f 01 	call	0x29e	; 0x29e <LCD_WriteChar>
 38a:	21 96       	adiw	r28, 0x01	; 1
 38c:	88 81       	ld	r24, Y
 38e:	81 11       	cpse	r24, r1
 390:	fa cf       	rjmp	.-12     	; 0x386 <LCD_WriteString+0x8>
 392:	df 91       	pop	r29
 394:	cf 91       	pop	r28
 396:	08 95       	ret

00000398 <LCD_GoTo>:
}


void LCD_GoTo(u8 line , u8 cell) {
	
	if(line==0) {
 398:	81 11       	cpse	r24, r1
 39a:	05 c0       	rjmp	.+10     	; 0x3a6 <LCD_GoTo+0xe>
		
		WriteInsterction(0x80+cell) ;
 39c:	80 e8       	ldi	r24, 0x80	; 128
 39e:	86 0f       	add	r24, r22
 3a0:	0e 94 70 00 	call	0xe0	; 0xe0 <WriteInsterction>
 3a4:	08 95       	ret

		
	}
	else if (line==1)	{
 3a6:	81 30       	cpi	r24, 0x01	; 1
 3a8:	21 f4       	brne	.+8      	; 0x3b2 <LCD_GoTo+0x1a>
		
		
		WriteInsterction((0x80+0x40)+cell) ;
 3aa:	80 ec       	ldi	r24, 0xC0	; 192
 3ac:	86 0f       	add	r24, r22
 3ae:	0e 94 70 00 	call	0xe0	; 0xe0 <WriteInsterction>
 3b2:	08 95       	ret

000003b4 <f1>:


void f1 (void)  {
	
	
	DIO_TogglePin(PINB0) ; 
 3b4:	88 e0       	ldi	r24, 0x08	; 8
 3b6:	0e 94 38 03 	call	0x670	; 0x670 <DIO_TogglePin>
 3ba:	2f ef       	ldi	r18, 0xFF	; 255
 3bc:	83 ed       	ldi	r24, 0xD3	; 211
 3be:	90 e3       	ldi	r25, 0x30	; 48
 3c0:	21 50       	subi	r18, 0x01	; 1
 3c2:	80 40       	sbci	r24, 0x00	; 0
 3c4:	90 40       	sbci	r25, 0x00	; 0
 3c6:	e1 f7       	brne	.-8      	; 0x3c0 <f1+0xc>
 3c8:	00 c0       	rjmp	.+0      	; 0x3ca <f1+0x16>
 3ca:	00 00       	nop
	_delay_ms(2000) ; 
	DIO_TogglePin(PINB0) ; 
 3cc:	88 e0       	ldi	r24, 0x08	; 8
 3ce:	0e 94 38 03 	call	0x670	; 0x670 <DIO_TogglePin>
 3d2:	08 95       	ret

000003d4 <f2>:
	
}

void f2 (void)   {
	
	DIO_TogglePin(PINB1) ; 
 3d4:	89 e0       	ldi	r24, 0x09	; 9
 3d6:	0e 94 38 03 	call	0x670	; 0x670 <DIO_TogglePin>
 3da:	2f ef       	ldi	r18, 0xFF	; 255
 3dc:	83 ed       	ldi	r24, 0xD3	; 211
 3de:	90 e3       	ldi	r25, 0x30	; 48
 3e0:	21 50       	subi	r18, 0x01	; 1
 3e2:	80 40       	sbci	r24, 0x00	; 0
 3e4:	90 40       	sbci	r25, 0x00	; 0
 3e6:	e1 f7       	brne	.-8      	; 0x3e0 <f2+0xc>
 3e8:	00 c0       	rjmp	.+0      	; 0x3ea <f2+0x16>
 3ea:	00 00       	nop
	_delay_ms(2000) ;
	DIO_TogglePin(PINB1) ;
 3ec:	89 e0       	ldi	r24, 0x09	; 9
 3ee:	0e 94 38 03 	call	0x670	; 0x670 <DIO_TogglePin>
 3f2:	08 95       	ret

000003f4 <main>:
extern volatile  u8 finishedRx_f ;

int main(void)
{
	/* DIO Initialization */
	DIO_Init() ;
 3f4:	0e 94 28 03 	call	0x650	; 0x650 <DIO_Init>
	/* LCD Initialization  */
	LCD_Init()  ;
 3f8:	0e 94 30 01 	call	0x260	; 0x260 <LCD_Init>
	/* Global Interrupt enable */
	GLOBAL_INTERRUPT_E ;
 3fc:	78 94       	sei
	/*EX interrupt Initialization */
	 	EX_INTERRUPT_PinState(INT0_PIN,FALLING) ;
 3fe:	63 e0       	ldi	r22, 0x03	; 3
 400:	80 e0       	ldi	r24, 0x00	; 0
 402:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <EX_INTERRUPT_PinState>
		 EX_INTERRUPT_SetCallBack(INT0_PIN,f1) ;
 406:	6a ed       	ldi	r22, 0xDA	; 218
 408:	71 e0       	ldi	r23, 0x01	; 1
 40a:	80 e0       	ldi	r24, 0x00	; 0
 40c:	0e 94 68 04 	call	0x8d0	; 0x8d0 <EX_INTERRUPT_SetCallBack>
		 
		 EX_INTERRUPT_PinState(INT1_PIN,FALLING) ;
 410:	63 e0       	ldi	r22, 0x03	; 3
 412:	81 e0       	ldi	r24, 0x01	; 1
 414:	0e 94 f1 03 	call	0x7e2	; 0x7e2 <EX_INTERRUPT_PinState>
		 EX_INTERRUPT_SetCallBack(INT1_PIN,f2) ;
 418:	6a ee       	ldi	r22, 0xEA	; 234
 41a:	71 e0       	ldi	r23, 0x01	; 1
 41c:	81 e0       	ldi	r24, 0x01	; 1
 41e:	0e 94 68 04 	call	0x8d0	; 0x8d0 <EX_INTERRUPT_SetCallBack>
// 	RGB_LED_init(RED) ;
// 	UART_ReceiveString_Asynch(&str) ;

	
	
		LCD_WriteString("ahmed") ; 
 422:	86 e9       	ldi	r24, 0x96	; 150
 424:	90 e0       	ldi	r25, 0x00	; 0
 426:	0e 94 bf 01 	call	0x37e	; 0x37e <LCD_WriteString>

		MOVE_Init() ; 
 42a:	0e 94 49 00 	call	0x92	; 0x92 <MOVE_Init>
 42e:	ff cf       	rjmp	.-2      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>

00000430 <DIO_InitPin>:

/*********************  Helper Function Defination    **************************/

static void DIO_InitPin(DIO_Pin_type pin,DIO_PinStatus_type status)
{
	switch(status){
 430:	61 30       	cpi	r22, 0x01	; 1
 432:	31 f0       	breq	.+12     	; 0x440 <DIO_InitPin+0x10>
 434:	08 f4       	brcc	.+2      	; 0x438 <DIO_InitPin+0x8>
 436:	b4 c0       	rjmp	.+360    	; 0x5a0 <DIO_InitPin+0x170>
 438:	62 30       	cpi	r22, 0x02	; 2
 43a:	09 f4       	brne	.+2      	; 0x43e <DIO_InitPin+0xe>
 43c:	59 c0       	rjmp	.+178    	; 0x4f0 <DIO_InitPin+0xc0>
 43e:	08 95       	ret
		case INFREE:
		switch(pin/8){
 440:	98 2f       	mov	r25, r24
 442:	96 95       	lsr	r25
 444:	96 95       	lsr	r25
 446:	96 95       	lsr	r25
 448:	91 30       	cpi	r25, 0x01	; 1
 44a:	c9 f0       	breq	.+50     	; 0x47e <DIO_InitPin+0x4e>
 44c:	28 f0       	brcs	.+10     	; 0x458 <DIO_InitPin+0x28>
 44e:	92 30       	cpi	r25, 0x02	; 2
 450:	49 f1       	breq	.+82     	; 0x4a4 <DIO_InitPin+0x74>
 452:	93 30       	cpi	r25, 0x03	; 3
 454:	d1 f1       	breq	.+116    	; 0x4ca <DIO_InitPin+0x9a>
 456:	08 95       	ret
				8%8 => 0 9%8 => 1 10%8 => 2
				....etc
			 */
			
			case 0:
			CLR_BIT(PORTA,(pin%8));
 458:	4b b3       	in	r20, 0x1b	; 27
 45a:	87 70       	andi	r24, 0x07	; 7
 45c:	21 e0       	ldi	r18, 0x01	; 1
 45e:	30 e0       	ldi	r19, 0x00	; 0
 460:	b9 01       	movw	r22, r18
 462:	02 c0       	rjmp	.+4      	; 0x468 <DIO_InitPin+0x38>
 464:	66 0f       	add	r22, r22
 466:	77 1f       	adc	r23, r23
 468:	8a 95       	dec	r24
 46a:	e2 f7       	brpl	.-8      	; 0x464 <DIO_InitPin+0x34>
 46c:	cb 01       	movw	r24, r22
 46e:	80 95       	com	r24
 470:	94 2f       	mov	r25, r20
 472:	98 23       	and	r25, r24
 474:	9b bb       	out	0x1b, r25	; 27
			CLR_BIT(DDRA,(pin%8));
 476:	9a b3       	in	r25, 0x1a	; 26
 478:	89 23       	and	r24, r25
 47a:	8a bb       	out	0x1a, r24	; 26
			break;
 47c:	08 95       	ret
			/* PORTB */
			case 1:
			CLR_BIT(PORTB,(pin%8));
 47e:	48 b3       	in	r20, 0x18	; 24
 480:	87 70       	andi	r24, 0x07	; 7
 482:	21 e0       	ldi	r18, 0x01	; 1
 484:	30 e0       	ldi	r19, 0x00	; 0
 486:	b9 01       	movw	r22, r18
 488:	02 c0       	rjmp	.+4      	; 0x48e <DIO_InitPin+0x5e>
 48a:	66 0f       	add	r22, r22
 48c:	77 1f       	adc	r23, r23
 48e:	8a 95       	dec	r24
 490:	e2 f7       	brpl	.-8      	; 0x48a <DIO_InitPin+0x5a>
 492:	cb 01       	movw	r24, r22
 494:	80 95       	com	r24
 496:	94 2f       	mov	r25, r20
 498:	98 23       	and	r25, r24
 49a:	98 bb       	out	0x18, r25	; 24
			CLR_BIT(DDRB,(pin%8));
 49c:	97 b3       	in	r25, 0x17	; 23
 49e:	89 23       	and	r24, r25
 4a0:	87 bb       	out	0x17, r24	; 23
			break;
 4a2:	08 95       	ret
			/* PORTC */
			case 2:
			CLR_BIT(PORTC,(pin%8));
 4a4:	45 b3       	in	r20, 0x15	; 21
 4a6:	87 70       	andi	r24, 0x07	; 7
 4a8:	21 e0       	ldi	r18, 0x01	; 1
 4aa:	30 e0       	ldi	r19, 0x00	; 0
 4ac:	b9 01       	movw	r22, r18
 4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <DIO_InitPin+0x84>
 4b0:	66 0f       	add	r22, r22
 4b2:	77 1f       	adc	r23, r23
 4b4:	8a 95       	dec	r24
 4b6:	e2 f7       	brpl	.-8      	; 0x4b0 <DIO_InitPin+0x80>
 4b8:	cb 01       	movw	r24, r22
 4ba:	80 95       	com	r24
 4bc:	94 2f       	mov	r25, r20
 4be:	98 23       	and	r25, r24
 4c0:	95 bb       	out	0x15, r25	; 21
			CLR_BIT(DDRC,(pin%8));
 4c2:	94 b3       	in	r25, 0x14	; 20
 4c4:	89 23       	and	r24, r25
 4c6:	84 bb       	out	0x14, r24	; 20
			break;
 4c8:	08 95       	ret
			/* PORTD */
			case 3:
			CLR_BIT(PORTD,(pin%8));
 4ca:	42 b3       	in	r20, 0x12	; 18
 4cc:	87 70       	andi	r24, 0x07	; 7
 4ce:	21 e0       	ldi	r18, 0x01	; 1
 4d0:	30 e0       	ldi	r19, 0x00	; 0
 4d2:	b9 01       	movw	r22, r18
 4d4:	02 c0       	rjmp	.+4      	; 0x4da <DIO_InitPin+0xaa>
 4d6:	66 0f       	add	r22, r22
 4d8:	77 1f       	adc	r23, r23
 4da:	8a 95       	dec	r24
 4dc:	e2 f7       	brpl	.-8      	; 0x4d6 <DIO_InitPin+0xa6>
 4de:	cb 01       	movw	r24, r22
 4e0:	80 95       	com	r24
 4e2:	94 2f       	mov	r25, r20
 4e4:	98 23       	and	r25, r24
 4e6:	92 bb       	out	0x12, r25	; 18
			CLR_BIT(DDRD,(pin%8));
 4e8:	91 b3       	in	r25, 0x11	; 17
 4ea:	89 23       	and	r24, r25
 4ec:	81 bb       	out	0x11, r24	; 17
			break;
 4ee:	08 95       	ret
		}
		break;
		case INPULL:
		switch(pin/8){
 4f0:	98 2f       	mov	r25, r24
 4f2:	96 95       	lsr	r25
 4f4:	96 95       	lsr	r25
 4f6:	96 95       	lsr	r25
 4f8:	91 30       	cpi	r25, 0x01	; 1
 4fa:	c9 f0       	breq	.+50     	; 0x52e <DIO_InitPin+0xfe>
 4fc:	28 f0       	brcs	.+10     	; 0x508 <DIO_InitPin+0xd8>
 4fe:	92 30       	cpi	r25, 0x02	; 2
 500:	49 f1       	breq	.+82     	; 0x554 <DIO_InitPin+0x124>
 502:	93 30       	cpi	r25, 0x03	; 3
 504:	d1 f1       	breq	.+116    	; 0x57a <DIO_InitPin+0x14a>
 506:	08 95       	ret
			case 0:
			CLR_BIT(DDRA,(pin%8));
 508:	4a b3       	in	r20, 0x1a	; 26
 50a:	87 70       	andi	r24, 0x07	; 7
 50c:	21 e0       	ldi	r18, 0x01	; 1
 50e:	30 e0       	ldi	r19, 0x00	; 0
 510:	b9 01       	movw	r22, r18
 512:	02 c0       	rjmp	.+4      	; 0x518 <DIO_InitPin+0xe8>
 514:	66 0f       	add	r22, r22
 516:	77 1f       	adc	r23, r23
 518:	8a 95       	dec	r24
 51a:	e2 f7       	brpl	.-8      	; 0x514 <DIO_InitPin+0xe4>
 51c:	cb 01       	movw	r24, r22
 51e:	96 2f       	mov	r25, r22
 520:	90 95       	com	r25
 522:	94 23       	and	r25, r20
 524:	9a bb       	out	0x1a, r25	; 26
			SET_BIT(PORTA,(pin%8));
 526:	9b b3       	in	r25, 0x1b	; 27
 528:	89 2b       	or	r24, r25
 52a:	8b bb       	out	0x1b, r24	; 27
			
			break;
 52c:	08 95       	ret
			case 1:
			CLR_BIT(DDRB,(pin%8));
 52e:	47 b3       	in	r20, 0x17	; 23
 530:	87 70       	andi	r24, 0x07	; 7
 532:	21 e0       	ldi	r18, 0x01	; 1
 534:	30 e0       	ldi	r19, 0x00	; 0
 536:	b9 01       	movw	r22, r18
 538:	02 c0       	rjmp	.+4      	; 0x53e <DIO_InitPin+0x10e>
 53a:	66 0f       	add	r22, r22
 53c:	77 1f       	adc	r23, r23
 53e:	8a 95       	dec	r24
 540:	e2 f7       	brpl	.-8      	; 0x53a <DIO_InitPin+0x10a>
 542:	cb 01       	movw	r24, r22
 544:	96 2f       	mov	r25, r22
 546:	90 95       	com	r25
 548:	94 23       	and	r25, r20
 54a:	97 bb       	out	0x17, r25	; 23
			SET_BIT(PORTB,(pin%8));
 54c:	98 b3       	in	r25, 0x18	; 24
 54e:	89 2b       	or	r24, r25
 550:	88 bb       	out	0x18, r24	; 24
			
			break;
 552:	08 95       	ret
			case 2:
			CLR_BIT(DDRC,(pin%8));
 554:	44 b3       	in	r20, 0x14	; 20
 556:	87 70       	andi	r24, 0x07	; 7
 558:	21 e0       	ldi	r18, 0x01	; 1
 55a:	30 e0       	ldi	r19, 0x00	; 0
 55c:	b9 01       	movw	r22, r18
 55e:	02 c0       	rjmp	.+4      	; 0x564 <DIO_InitPin+0x134>
 560:	66 0f       	add	r22, r22
 562:	77 1f       	adc	r23, r23
 564:	8a 95       	dec	r24
 566:	e2 f7       	brpl	.-8      	; 0x560 <DIO_InitPin+0x130>
 568:	cb 01       	movw	r24, r22
 56a:	96 2f       	mov	r25, r22
 56c:	90 95       	com	r25
 56e:	94 23       	and	r25, r20
 570:	94 bb       	out	0x14, r25	; 20
			SET_BIT(PORTC,(pin%8));
 572:	95 b3       	in	r25, 0x15	; 21
 574:	89 2b       	or	r24, r25
 576:	85 bb       	out	0x15, r24	; 21
			
			break;
 578:	08 95       	ret
			case 3:
			CLR_BIT(DDRD,(pin%8));
 57a:	41 b3       	in	r20, 0x11	; 17
 57c:	87 70       	andi	r24, 0x07	; 7
 57e:	21 e0       	ldi	r18, 0x01	; 1
 580:	30 e0       	ldi	r19, 0x00	; 0
 582:	b9 01       	movw	r22, r18
 584:	02 c0       	rjmp	.+4      	; 0x58a <DIO_InitPin+0x15a>
 586:	66 0f       	add	r22, r22
 588:	77 1f       	adc	r23, r23
 58a:	8a 95       	dec	r24
 58c:	e2 f7       	brpl	.-8      	; 0x586 <DIO_InitPin+0x156>
 58e:	cb 01       	movw	r24, r22
 590:	96 2f       	mov	r25, r22
 592:	90 95       	com	r25
 594:	94 23       	and	r25, r20
 596:	91 bb       	out	0x11, r25	; 17
			SET_BIT(PORTD,(pin%8));
 598:	92 b3       	in	r25, 0x12	; 18
 59a:	89 2b       	or	r24, r25
 59c:	82 bb       	out	0x12, r24	; 18
			
			break;
 59e:	08 95       	ret
		}
		
		break;
		case  OUTPUT:
		switch(pin/8){
 5a0:	98 2f       	mov	r25, r24
 5a2:	96 95       	lsr	r25
 5a4:	96 95       	lsr	r25
 5a6:	96 95       	lsr	r25
 5a8:	91 30       	cpi	r25, 0x01	; 1
 5aa:	c9 f0       	breq	.+50     	; 0x5de <DIO_InitPin+0x1ae>
 5ac:	28 f0       	brcs	.+10     	; 0x5b8 <DIO_InitPin+0x188>
 5ae:	92 30       	cpi	r25, 0x02	; 2
 5b0:	49 f1       	breq	.+82     	; 0x604 <DIO_InitPin+0x1d4>
 5b2:	93 30       	cpi	r25, 0x03	; 3
 5b4:	d1 f1       	breq	.+116    	; 0x62a <DIO_InitPin+0x1fa>
 5b6:	08 95       	ret
			case 0:
			SET_BIT(DDRA,(pin%8));
 5b8:	4a b3       	in	r20, 0x1a	; 26
 5ba:	87 70       	andi	r24, 0x07	; 7
 5bc:	21 e0       	ldi	r18, 0x01	; 1
 5be:	30 e0       	ldi	r19, 0x00	; 0
 5c0:	b9 01       	movw	r22, r18
 5c2:	02 c0       	rjmp	.+4      	; 0x5c8 <DIO_InitPin+0x198>
 5c4:	66 0f       	add	r22, r22
 5c6:	77 1f       	adc	r23, r23
 5c8:	8a 95       	dec	r24
 5ca:	e2 f7       	brpl	.-8      	; 0x5c4 <DIO_InitPin+0x194>
 5cc:	cb 01       	movw	r24, r22
 5ce:	94 2f       	mov	r25, r20
 5d0:	98 2b       	or	r25, r24
 5d2:	9a bb       	out	0x1a, r25	; 26
			CLR_BIT(PORTA,(pin%8));
 5d4:	9b b3       	in	r25, 0x1b	; 27
 5d6:	80 95       	com	r24
 5d8:	89 23       	and	r24, r25
 5da:	8b bb       	out	0x1b, r24	; 27
			break;
 5dc:	08 95       	ret
			case 1:
			SET_BIT(DDRB,(pin%8));
 5de:	47 b3       	in	r20, 0x17	; 23
 5e0:	87 70       	andi	r24, 0x07	; 7
 5e2:	21 e0       	ldi	r18, 0x01	; 1
 5e4:	30 e0       	ldi	r19, 0x00	; 0
 5e6:	b9 01       	movw	r22, r18
 5e8:	02 c0       	rjmp	.+4      	; 0x5ee <DIO_InitPin+0x1be>
 5ea:	66 0f       	add	r22, r22
 5ec:	77 1f       	adc	r23, r23
 5ee:	8a 95       	dec	r24
 5f0:	e2 f7       	brpl	.-8      	; 0x5ea <DIO_InitPin+0x1ba>
 5f2:	cb 01       	movw	r24, r22
 5f4:	94 2f       	mov	r25, r20
 5f6:	98 2b       	or	r25, r24
 5f8:	97 bb       	out	0x17, r25	; 23
			CLR_BIT(PORTB,(pin%8));
 5fa:	98 b3       	in	r25, 0x18	; 24
 5fc:	80 95       	com	r24
 5fe:	89 23       	and	r24, r25
 600:	88 bb       	out	0x18, r24	; 24
			break;
 602:	08 95       	ret
			case 2:
			SET_BIT(DDRC,(pin%8));
 604:	44 b3       	in	r20, 0x14	; 20
 606:	87 70       	andi	r24, 0x07	; 7
 608:	21 e0       	ldi	r18, 0x01	; 1
 60a:	30 e0       	ldi	r19, 0x00	; 0
 60c:	b9 01       	movw	r22, r18
 60e:	02 c0       	rjmp	.+4      	; 0x614 <DIO_InitPin+0x1e4>
 610:	66 0f       	add	r22, r22
 612:	77 1f       	adc	r23, r23
 614:	8a 95       	dec	r24
 616:	e2 f7       	brpl	.-8      	; 0x610 <DIO_InitPin+0x1e0>
 618:	cb 01       	movw	r24, r22
 61a:	94 2f       	mov	r25, r20
 61c:	98 2b       	or	r25, r24
 61e:	94 bb       	out	0x14, r25	; 20
			CLR_BIT(PORTC,(pin%8));
 620:	95 b3       	in	r25, 0x15	; 21
 622:	80 95       	com	r24
 624:	89 23       	and	r24, r25
 626:	85 bb       	out	0x15, r24	; 21
			break;
 628:	08 95       	ret
			case 3:
			SET_BIT(DDRD,(pin%8));
 62a:	41 b3       	in	r20, 0x11	; 17
 62c:	87 70       	andi	r24, 0x07	; 7
 62e:	21 e0       	ldi	r18, 0x01	; 1
 630:	30 e0       	ldi	r19, 0x00	; 0
 632:	b9 01       	movw	r22, r18
 634:	02 c0       	rjmp	.+4      	; 0x63a <DIO_InitPin+0x20a>
 636:	66 0f       	add	r22, r22
 638:	77 1f       	adc	r23, r23
 63a:	8a 95       	dec	r24
 63c:	e2 f7       	brpl	.-8      	; 0x636 <DIO_InitPin+0x206>
 63e:	cb 01       	movw	r24, r22
 640:	94 2f       	mov	r25, r20
 642:	98 2b       	or	r25, r24
 644:	91 bb       	out	0x11, r25	; 17
			CLR_BIT(PORTD,(pin%8));
 646:	92 b3       	in	r25, 0x12	; 18
 648:	80 95       	com	r24
 64a:	89 23       	and	r24, r25
 64c:	82 bb       	out	0x12, r24	; 18
 64e:	08 95       	ret

00000650 <DIO_Init>:
/*********************  Global Variable Defination    **************************/

/*********************  APIs Defination          *******************************/


void DIO_Init(void) {
 650:	cf 93       	push	r28
	
	for (DIO_Pin_type pin = PINA0 ; pin<TOTAL_PINS ; pin++  )
 652:	c0 e0       	ldi	r28, 0x00	; 0
 654:	09 c0       	rjmp	.+18     	; 0x668 <DIO_Init+0x18>
	{
		DIO_InitPin(pin , PinsStatusArray[pin]) ;
 656:	ec 2f       	mov	r30, r28
 658:	f0 e0       	ldi	r31, 0x00	; 0
 65a:	e0 5a       	subi	r30, 0xA0	; 160
 65c:	ff 4f       	sbci	r31, 0xFF	; 255
 65e:	60 81       	ld	r22, Z
 660:	8c 2f       	mov	r24, r28
 662:	0e 94 18 02 	call	0x430	; 0x430 <DIO_InitPin>
/*********************  APIs Defination          *******************************/


void DIO_Init(void) {
	
	for (DIO_Pin_type pin = PINA0 ; pin<TOTAL_PINS ; pin++  )
 666:	cf 5f       	subi	r28, 0xFF	; 255
 668:	c0 32       	cpi	r28, 0x20	; 32
 66a:	a8 f3       	brcs	.-22     	; 0x656 <DIO_Init+0x6>
	{
		DIO_InitPin(pin , PinsStatusArray[pin]) ;
	}
	
}
 66c:	cf 91       	pop	r28
 66e:	08 95       	ret

00000670 <DIO_TogglePin>:

void DIO_TogglePin(DIO_Pin_type pin)  {
	
	switch(pin/8){
 670:	98 2f       	mov	r25, r24
 672:	96 95       	lsr	r25
 674:	96 95       	lsr	r25
 676:	96 95       	lsr	r25
 678:	91 30       	cpi	r25, 0x01	; 1
 67a:	a1 f0       	breq	.+40     	; 0x6a4 <DIO_TogglePin+0x34>
 67c:	28 f0       	brcs	.+10     	; 0x688 <DIO_TogglePin+0x18>
 67e:	92 30       	cpi	r25, 0x02	; 2
 680:	f9 f0       	breq	.+62     	; 0x6c0 <DIO_TogglePin+0x50>
 682:	93 30       	cpi	r25, 0x03	; 3
 684:	59 f1       	breq	.+86     	; 0x6dc <DIO_TogglePin+0x6c>
 686:	08 95       	ret
		case 0:
		TOG_BIT(PORTA,(pin%8));
 688:	4b b3       	in	r20, 0x1b	; 27
 68a:	87 70       	andi	r24, 0x07	; 7
 68c:	21 e0       	ldi	r18, 0x01	; 1
 68e:	30 e0       	ldi	r19, 0x00	; 0
 690:	b9 01       	movw	r22, r18
 692:	02 c0       	rjmp	.+4      	; 0x698 <DIO_TogglePin+0x28>
 694:	66 0f       	add	r22, r22
 696:	77 1f       	adc	r23, r23
 698:	8a 95       	dec	r24
 69a:	e2 f7       	brpl	.-8      	; 0x694 <DIO_TogglePin+0x24>
 69c:	cb 01       	movw	r24, r22
 69e:	84 27       	eor	r24, r20
 6a0:	8b bb       	out	0x1b, r24	; 27
		break;
 6a2:	08 95       	ret
		case 1:
		TOG_BIT(PORTB,(pin%8));
 6a4:	48 b3       	in	r20, 0x18	; 24
 6a6:	87 70       	andi	r24, 0x07	; 7
 6a8:	21 e0       	ldi	r18, 0x01	; 1
 6aa:	30 e0       	ldi	r19, 0x00	; 0
 6ac:	b9 01       	movw	r22, r18
 6ae:	02 c0       	rjmp	.+4      	; 0x6b4 <DIO_TogglePin+0x44>
 6b0:	66 0f       	add	r22, r22
 6b2:	77 1f       	adc	r23, r23
 6b4:	8a 95       	dec	r24
 6b6:	e2 f7       	brpl	.-8      	; 0x6b0 <DIO_TogglePin+0x40>
 6b8:	cb 01       	movw	r24, r22
 6ba:	84 27       	eor	r24, r20
 6bc:	88 bb       	out	0x18, r24	; 24
		break;
 6be:	08 95       	ret
		case 2:
		TOG_BIT(PORTC,(pin%8));
 6c0:	45 b3       	in	r20, 0x15	; 21
 6c2:	87 70       	andi	r24, 0x07	; 7
 6c4:	21 e0       	ldi	r18, 0x01	; 1
 6c6:	30 e0       	ldi	r19, 0x00	; 0
 6c8:	b9 01       	movw	r22, r18
 6ca:	02 c0       	rjmp	.+4      	; 0x6d0 <DIO_TogglePin+0x60>
 6cc:	66 0f       	add	r22, r22
 6ce:	77 1f       	adc	r23, r23
 6d0:	8a 95       	dec	r24
 6d2:	e2 f7       	brpl	.-8      	; 0x6cc <DIO_TogglePin+0x5c>
 6d4:	cb 01       	movw	r24, r22
 6d6:	84 27       	eor	r24, r20
 6d8:	85 bb       	out	0x15, r24	; 21
		break;
 6da:	08 95       	ret
		case 3:
		TOG_BIT(PORTD,(pin%8));
 6dc:	42 b3       	in	r20, 0x12	; 18
 6de:	87 70       	andi	r24, 0x07	; 7
 6e0:	21 e0       	ldi	r18, 0x01	; 1
 6e2:	30 e0       	ldi	r19, 0x00	; 0
 6e4:	b9 01       	movw	r22, r18
 6e6:	02 c0       	rjmp	.+4      	; 0x6ec <DIO_TogglePin+0x7c>
 6e8:	66 0f       	add	r22, r22
 6ea:	77 1f       	adc	r23, r23
 6ec:	8a 95       	dec	r24
 6ee:	e2 f7       	brpl	.-8      	; 0x6e8 <DIO_TogglePin+0x78>
 6f0:	cb 01       	movw	r24, r22
 6f2:	84 27       	eor	r24, r20
 6f4:	82 bb       	out	0x12, r24	; 18
 6f6:	08 95       	ret

000006f8 <DIO_WritePin>:
	
}


void DIO_WritePin(DIO_Pin_type pin,DIO_PinVoltage_type volt){
	switch(pin/8){
 6f8:	98 2f       	mov	r25, r24
 6fa:	96 95       	lsr	r25
 6fc:	96 95       	lsr	r25
 6fe:	96 95       	lsr	r25
 700:	91 30       	cpi	r25, 0x01	; 1
 702:	09 f1       	breq	.+66     	; 0x746 <DIO_WritePin+0x4e>
 704:	30 f0       	brcs	.+12     	; 0x712 <DIO_WritePin+0x1a>
 706:	92 30       	cpi	r25, 0x02	; 2
 708:	c1 f1       	breq	.+112    	; 0x77a <DIO_WritePin+0x82>
 70a:	93 30       	cpi	r25, 0x03	; 3
 70c:	09 f4       	brne	.+2      	; 0x710 <DIO_WritePin+0x18>
 70e:	4f c0       	rjmp	.+158    	; 0x7ae <DIO_WritePin+0xb6>
 710:	08 95       	ret
		case 0:
		SET_BIT(DDRA,(pin%8));
 712:	9a b3       	in	r25, 0x1a	; 26
 714:	87 70       	andi	r24, 0x07	; 7
 716:	21 e0       	ldi	r18, 0x01	; 1
 718:	30 e0       	ldi	r19, 0x00	; 0
 71a:	08 2e       	mov	r0, r24
 71c:	02 c0       	rjmp	.+4      	; 0x722 <DIO_WritePin+0x2a>
 71e:	22 0f       	add	r18, r18
 720:	33 1f       	adc	r19, r19
 722:	0a 94       	dec	r0
 724:	e2 f7       	brpl	.-8      	; 0x71e <DIO_WritePin+0x26>
 726:	92 2b       	or	r25, r18
 728:	9a bb       	out	0x1a, r25	; 26
		WRITE_BIT(PORTA,(pin%8),volt);
 72a:	9b b3       	in	r25, 0x1b	; 27
 72c:	20 95       	com	r18
 72e:	29 23       	and	r18, r25
 730:	2b bb       	out	0x1b, r18	; 27
 732:	9b b3       	in	r25, 0x1b	; 27
 734:	70 e0       	ldi	r23, 0x00	; 0
 736:	02 c0       	rjmp	.+4      	; 0x73c <DIO_WritePin+0x44>
 738:	66 0f       	add	r22, r22
 73a:	77 1f       	adc	r23, r23
 73c:	8a 95       	dec	r24
 73e:	e2 f7       	brpl	.-8      	; 0x738 <DIO_WritePin+0x40>
 740:	69 27       	eor	r22, r25
 742:	6b bb       	out	0x1b, r22	; 27
		break;
 744:	08 95       	ret
		case 1:
		SET_BIT(DDRB,(pin%8));
 746:	97 b3       	in	r25, 0x17	; 23
 748:	87 70       	andi	r24, 0x07	; 7
 74a:	21 e0       	ldi	r18, 0x01	; 1
 74c:	30 e0       	ldi	r19, 0x00	; 0
 74e:	08 2e       	mov	r0, r24
 750:	02 c0       	rjmp	.+4      	; 0x756 <DIO_WritePin+0x5e>
 752:	22 0f       	add	r18, r18
 754:	33 1f       	adc	r19, r19
 756:	0a 94       	dec	r0
 758:	e2 f7       	brpl	.-8      	; 0x752 <DIO_WritePin+0x5a>
 75a:	92 2b       	or	r25, r18
 75c:	97 bb       	out	0x17, r25	; 23
		WRITE_BIT(PORTB,(pin%8),volt);
 75e:	98 b3       	in	r25, 0x18	; 24
 760:	20 95       	com	r18
 762:	29 23       	and	r18, r25
 764:	28 bb       	out	0x18, r18	; 24
 766:	98 b3       	in	r25, 0x18	; 24
 768:	70 e0       	ldi	r23, 0x00	; 0
 76a:	02 c0       	rjmp	.+4      	; 0x770 <DIO_WritePin+0x78>
 76c:	66 0f       	add	r22, r22
 76e:	77 1f       	adc	r23, r23
 770:	8a 95       	dec	r24
 772:	e2 f7       	brpl	.-8      	; 0x76c <DIO_WritePin+0x74>
 774:	69 27       	eor	r22, r25
 776:	68 bb       	out	0x18, r22	; 24
		break;
 778:	08 95       	ret
		case 2:
		SET_BIT(DDRC,(pin%8));
 77a:	94 b3       	in	r25, 0x14	; 20
 77c:	87 70       	andi	r24, 0x07	; 7
 77e:	21 e0       	ldi	r18, 0x01	; 1
 780:	30 e0       	ldi	r19, 0x00	; 0
 782:	08 2e       	mov	r0, r24
 784:	02 c0       	rjmp	.+4      	; 0x78a <DIO_WritePin+0x92>
 786:	22 0f       	add	r18, r18
 788:	33 1f       	adc	r19, r19
 78a:	0a 94       	dec	r0
 78c:	e2 f7       	brpl	.-8      	; 0x786 <DIO_WritePin+0x8e>
 78e:	92 2b       	or	r25, r18
 790:	94 bb       	out	0x14, r25	; 20
		WRITE_BIT(PORTC,(pin%8),volt);
 792:	95 b3       	in	r25, 0x15	; 21
 794:	20 95       	com	r18
 796:	29 23       	and	r18, r25
 798:	25 bb       	out	0x15, r18	; 21
 79a:	95 b3       	in	r25, 0x15	; 21
 79c:	70 e0       	ldi	r23, 0x00	; 0
 79e:	02 c0       	rjmp	.+4      	; 0x7a4 <DIO_WritePin+0xac>
 7a0:	66 0f       	add	r22, r22
 7a2:	77 1f       	adc	r23, r23
 7a4:	8a 95       	dec	r24
 7a6:	e2 f7       	brpl	.-8      	; 0x7a0 <DIO_WritePin+0xa8>
 7a8:	69 27       	eor	r22, r25
 7aa:	65 bb       	out	0x15, r22	; 21
		break;
 7ac:	08 95       	ret
		case 3:
		SET_BIT(DDRD,(pin%8));
 7ae:	91 b3       	in	r25, 0x11	; 17
 7b0:	87 70       	andi	r24, 0x07	; 7
 7b2:	21 e0       	ldi	r18, 0x01	; 1
 7b4:	30 e0       	ldi	r19, 0x00	; 0
 7b6:	08 2e       	mov	r0, r24
 7b8:	02 c0       	rjmp	.+4      	; 0x7be <DIO_WritePin+0xc6>
 7ba:	22 0f       	add	r18, r18
 7bc:	33 1f       	adc	r19, r19
 7be:	0a 94       	dec	r0
 7c0:	e2 f7       	brpl	.-8      	; 0x7ba <DIO_WritePin+0xc2>
 7c2:	92 2b       	or	r25, r18
 7c4:	91 bb       	out	0x11, r25	; 17
		WRITE_BIT(PORTD,(pin%8),volt);
 7c6:	92 b3       	in	r25, 0x12	; 18
 7c8:	20 95       	com	r18
 7ca:	29 23       	and	r18, r25
 7cc:	22 bb       	out	0x12, r18	; 18
 7ce:	92 b3       	in	r25, 0x12	; 18
 7d0:	70 e0       	ldi	r23, 0x00	; 0
 7d2:	02 c0       	rjmp	.+4      	; 0x7d8 <DIO_WritePin+0xe0>
 7d4:	66 0f       	add	r22, r22
 7d6:	77 1f       	adc	r23, r23
 7d8:	8a 95       	dec	r24
 7da:	e2 f7       	brpl	.-8      	; 0x7d4 <DIO_WritePin+0xdc>
 7dc:	69 27       	eor	r22, r25
 7de:	62 bb       	out	0x12, r22	; 18
 7e0:	08 95       	ret

000007e2 <EX_INTERRUPT_PinState>:

void EX_INTERRUPT_PinState(INTERRUPT_ExInterrupt_pin pin  ,INTERRUPT_ExInterrupt_senceControl senceControl )  {
	
	/*  pin is disable */
	
	if(senceControl==DISABLE_I) {
 7e2:	61 11       	cpse	r22, r1
 7e4:	12 c0       	rjmp	.+36     	; 0x80a <__DATA_REGION_LENGTH__+0xa>
		
		switch(pin) {
 7e6:	81 30       	cpi	r24, 0x01	; 1
 7e8:	41 f0       	breq	.+16     	; 0x7fa <EX_INTERRUPT_PinState+0x18>
 7ea:	18 f0       	brcs	.+6      	; 0x7f2 <EX_INTERRUPT_PinState+0x10>
 7ec:	82 30       	cpi	r24, 0x02	; 2
 7ee:	49 f0       	breq	.+18     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
 7f0:	08 95       	ret
			case INT0_PIN :
			CLR_BIT(GICR,INT0) ;
 7f2:	8b b7       	in	r24, 0x3b	; 59
 7f4:	8f 7b       	andi	r24, 0xBF	; 191
 7f6:	8b bf       	out	0x3b, r24	; 59
			break;
 7f8:	08 95       	ret
			case INT1_PIN :
			CLR_BIT(GICR,INT1) ;
 7fa:	8b b7       	in	r24, 0x3b	; 59
 7fc:	8f 77       	andi	r24, 0x7F	; 127
 7fe:	8b bf       	out	0x3b, r24	; 59
			break;
 800:	08 95       	ret
			case INT2_PIN :
			CLR_BIT(GICR,INT2) ;
 802:	8b b7       	in	r24, 0x3b	; 59
 804:	8f 7d       	andi	r24, 0xDF	; 223
 806:	8b bf       	out	0x3b, r24	; 59
			break;
 808:	08 95       	ret
		}
		
	}
	/* pin is enable */
	else  {
		switch(pin) {
 80a:	81 30       	cpi	r24, 0x01	; 1
 80c:	41 f0       	breq	.+16     	; 0x81e <__DATA_REGION_LENGTH__+0x1e>
 80e:	18 f0       	brcs	.+6      	; 0x816 <__DATA_REGION_LENGTH__+0x16>
 810:	82 30       	cpi	r24, 0x02	; 2
 812:	49 f0       	breq	.+18     	; 0x826 <__DATA_REGION_LENGTH__+0x26>
 814:	0b c0       	rjmp	.+22     	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
			case INT0_PIN :
			SET_BIT(GICR,INT0) ;
 816:	9b b7       	in	r25, 0x3b	; 59
 818:	90 64       	ori	r25, 0x40	; 64
 81a:	9b bf       	out	0x3b, r25	; 59
			break;
 81c:	07 c0       	rjmp	.+14     	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
			case INT1_PIN :
			SET_BIT(GICR,INT1) ;
 81e:	9b b7       	in	r25, 0x3b	; 59
 820:	90 68       	ori	r25, 0x80	; 128
 822:	9b bf       	out	0x3b, r25	; 59
			break;
 824:	03 c0       	rjmp	.+6      	; 0x82c <__DATA_REGION_LENGTH__+0x2c>
			case INT2_PIN :
			SET_BIT(GICR,INT2) ;
 826:	9b b7       	in	r25, 0x3b	; 59
 828:	90 62       	ori	r25, 0x20	; 32
 82a:	9b bf       	out	0x3b, r25	; 59
			break;
		}
		
		if(pin==INT1_PIN) {
 82c:	81 30       	cpi	r24, 0x01	; 1
 82e:	39 f5       	brne	.+78     	; 0x87e <__stack+0x1f>
			switch (senceControl) {
 830:	62 30       	cpi	r22, 0x02	; 2
 832:	81 f0       	breq	.+32     	; 0x854 <__DATA_REGION_LENGTH__+0x54>
 834:	18 f4       	brcc	.+6      	; 0x83c <__DATA_REGION_LENGTH__+0x3c>
 836:	61 30       	cpi	r22, 0x01	; 1
 838:	31 f0       	breq	.+12     	; 0x846 <__DATA_REGION_LENGTH__+0x46>
 83a:	08 95       	ret
 83c:	63 30       	cpi	r22, 0x03	; 3
 83e:	89 f0       	breq	.+34     	; 0x862 <__stack+0x3>
 840:	64 30       	cpi	r22, 0x04	; 4
 842:	b1 f0       	breq	.+44     	; 0x870 <__stack+0x11>
 844:	08 95       	ret
				
				case LOW_LEVEL :
				CLR_BIT(MCUCR,ISC11) ;
 846:	85 b7       	in	r24, 0x35	; 53
 848:	87 7f       	andi	r24, 0xF7	; 247
 84a:	85 bf       	out	0x35, r24	; 53
				CLR_BIT(MCUCR,ISC10) ;
 84c:	85 b7       	in	r24, 0x35	; 53
 84e:	8b 7f       	andi	r24, 0xFB	; 251
 850:	85 bf       	out	0x35, r24	; 53
				break ;
 852:	08 95       	ret

				case CHANGE :
				CLR_BIT(MCUCR,ISC11) ;
 854:	85 b7       	in	r24, 0x35	; 53
 856:	87 7f       	andi	r24, 0xF7	; 247
 858:	85 bf       	out	0x35, r24	; 53
				SET_BIT(MCUCR,ISC10) ;
 85a:	85 b7       	in	r24, 0x35	; 53
 85c:	84 60       	ori	r24, 0x04	; 4
 85e:	85 bf       	out	0x35, r24	; 53
				break ;
 860:	08 95       	ret

				case FALLING :
				SET_BIT(MCUCR,ISC11) ;
 862:	85 b7       	in	r24, 0x35	; 53
 864:	88 60       	ori	r24, 0x08	; 8
 866:	85 bf       	out	0x35, r24	; 53
				CLR_BIT(MCUCR,ISC10) ;
 868:	85 b7       	in	r24, 0x35	; 53
 86a:	8b 7f       	andi	r24, 0xFB	; 251
 86c:	85 bf       	out	0x35, r24	; 53
				break ;
 86e:	08 95       	ret

				case RISING :
				SET_BIT(MCUCR,ISC11) ;
 870:	85 b7       	in	r24, 0x35	; 53
 872:	88 60       	ori	r24, 0x08	; 8
 874:	85 bf       	out	0x35, r24	; 53
				SET_BIT(MCUCR,ISC10) ;
 876:	85 b7       	in	r24, 0x35	; 53
 878:	84 60       	ori	r24, 0x04	; 4
 87a:	85 bf       	out	0x35, r24	; 53
				break 	 ;
 87c:	08 95       	ret
			}
		}
		
		else if(pin==INT0_PIN) {
 87e:	81 11       	cpse	r24, r1
 880:	26 c0       	rjmp	.+76     	; 0x8ce <__stack+0x6f>
			switch (senceControl) {
 882:	62 30       	cpi	r22, 0x02	; 2
 884:	81 f0       	breq	.+32     	; 0x8a6 <__stack+0x47>
 886:	18 f4       	brcc	.+6      	; 0x88e <__stack+0x2f>
 888:	61 30       	cpi	r22, 0x01	; 1
 88a:	31 f0       	breq	.+12     	; 0x898 <__stack+0x39>
 88c:	08 95       	ret
 88e:	63 30       	cpi	r22, 0x03	; 3
 890:	89 f0       	breq	.+34     	; 0x8b4 <__stack+0x55>
 892:	64 30       	cpi	r22, 0x04	; 4
 894:	b1 f0       	breq	.+44     	; 0x8c2 <__stack+0x63>
 896:	08 95       	ret
				
				case LOW_LEVEL :
				CLR_BIT(MCUCR,ISC01) ;
 898:	85 b7       	in	r24, 0x35	; 53
 89a:	8d 7f       	andi	r24, 0xFD	; 253
 89c:	85 bf       	out	0x35, r24	; 53
				CLR_BIT(MCUCR,ISC00) ;
 89e:	85 b7       	in	r24, 0x35	; 53
 8a0:	8e 7f       	andi	r24, 0xFE	; 254
 8a2:	85 bf       	out	0x35, r24	; 53
				break ;
 8a4:	08 95       	ret
				case CHANGE :
				CLR_BIT(MCUCR,ISC01) ;
 8a6:	85 b7       	in	r24, 0x35	; 53
 8a8:	8d 7f       	andi	r24, 0xFD	; 253
 8aa:	85 bf       	out	0x35, r24	; 53
				SET_BIT(MCUCR,ISC00) ;
 8ac:	85 b7       	in	r24, 0x35	; 53
 8ae:	81 60       	ori	r24, 0x01	; 1
 8b0:	85 bf       	out	0x35, r24	; 53
				break ;
 8b2:	08 95       	ret

				case FALLING :
				SET_BIT(MCUCR,ISC01) ;
 8b4:	85 b7       	in	r24, 0x35	; 53
 8b6:	82 60       	ori	r24, 0x02	; 2
 8b8:	85 bf       	out	0x35, r24	; 53
				CLR_BIT(MCUCR,ISC00) ;
 8ba:	85 b7       	in	r24, 0x35	; 53
 8bc:	8e 7f       	andi	r24, 0xFE	; 254
 8be:	85 bf       	out	0x35, r24	; 53
				break ;
 8c0:	08 95       	ret

				case RISING :
				SET_BIT(MCUCR,ISC01) ;
 8c2:	85 b7       	in	r24, 0x35	; 53
 8c4:	82 60       	ori	r24, 0x02	; 2
 8c6:	85 bf       	out	0x35, r24	; 53
				SET_BIT(MCUCR,ISC00) ;
 8c8:	85 b7       	in	r24, 0x35	; 53
 8ca:	81 60       	ori	r24, 0x01	; 1
 8cc:	85 bf       	out	0x35, r24	; 53
 8ce:	08 95       	ret

000008d0 <EX_INTERRUPT_SetCallBack>:

/*****************************call back function***************************/

void EX_INTERRUPT_SetCallBack(INTERRUPT_ExInterrupt_pin pin  , void (*local_ptr) (void)){

	switch(pin) {
 8d0:	81 30       	cpi	r24, 0x01	; 1
 8d2:	49 f0       	breq	.+18     	; 0x8e6 <EX_INTERRUPT_SetCallBack+0x16>
 8d4:	18 f0       	brcs	.+6      	; 0x8dc <EX_INTERRUPT_SetCallBack+0xc>
 8d6:	82 30       	cpi	r24, 0x02	; 2
 8d8:	59 f0       	breq	.+22     	; 0x8f0 <EX_INTERRUPT_SetCallBack+0x20>
 8da:	08 95       	ret
		case INT0_PIN :
		INT0_fptr= local_ptr ;
 8dc:	70 93 a1 00 	sts	0x00A1, r23	; 0x8000a1 <INT0_fptr+0x1>
 8e0:	60 93 a0 00 	sts	0x00A0, r22	; 0x8000a0 <INT0_fptr>
		break;
 8e4:	08 95       	ret
		case INT1_PIN :
		INT1_fptr= local_ptr ;
 8e6:	70 93 9f 00 	sts	0x009F, r23	; 0x80009f <INT1_fptr+0x1>
 8ea:	60 93 9e 00 	sts	0x009E, r22	; 0x80009e <INT1_fptr>
		break;
 8ee:	08 95       	ret
		case INT2_PIN :
		INT2_fptr= local_ptr ;
 8f0:	70 93 9d 00 	sts	0x009D, r23	; 0x80009d <__data_end+0x1>
 8f4:	60 93 9c 00 	sts	0x009C, r22	; 0x80009c <__data_end>
 8f8:	08 95       	ret

000008fa <__vector_1>:
}


/*****************************ISR With call back function***************************/

ISR(INT0_vect){
 8fa:	1f 92       	push	r1
 8fc:	0f 92       	push	r0
 8fe:	0f b6       	in	r0, 0x3f	; 63
 900:	0f 92       	push	r0
 902:	11 24       	eor	r1, r1
 904:	2f 93       	push	r18
 906:	3f 93       	push	r19
 908:	4f 93       	push	r20
 90a:	5f 93       	push	r21
 90c:	6f 93       	push	r22
 90e:	7f 93       	push	r23
 910:	8f 93       	push	r24
 912:	9f 93       	push	r25
 914:	af 93       	push	r26
 916:	bf 93       	push	r27
 918:	ef 93       	push	r30
 91a:	ff 93       	push	r31
	
	
	if(INT0_fptr!=NULL_PTR) {
 91c:	e0 91 a0 00 	lds	r30, 0x00A0	; 0x8000a0 <INT0_fptr>
 920:	f0 91 a1 00 	lds	r31, 0x00A1	; 0x8000a1 <INT0_fptr+0x1>
 924:	30 97       	sbiw	r30, 0x00	; 0
 926:	09 f0       	breq	.+2      	; 0x92a <__vector_1+0x30>
		
		INT0_fptr() ;
 928:	09 95       	icall
	}
	
}
 92a:	ff 91       	pop	r31
 92c:	ef 91       	pop	r30
 92e:	bf 91       	pop	r27
 930:	af 91       	pop	r26
 932:	9f 91       	pop	r25
 934:	8f 91       	pop	r24
 936:	7f 91       	pop	r23
 938:	6f 91       	pop	r22
 93a:	5f 91       	pop	r21
 93c:	4f 91       	pop	r20
 93e:	3f 91       	pop	r19
 940:	2f 91       	pop	r18
 942:	0f 90       	pop	r0
 944:	0f be       	out	0x3f, r0	; 63
 946:	0f 90       	pop	r0
 948:	1f 90       	pop	r1
 94a:	18 95       	reti

0000094c <__vector_2>:



ISR(INT1_vect){
 94c:	1f 92       	push	r1
 94e:	0f 92       	push	r0
 950:	0f b6       	in	r0, 0x3f	; 63
 952:	0f 92       	push	r0
 954:	11 24       	eor	r1, r1
 956:	2f 93       	push	r18
 958:	3f 93       	push	r19
 95a:	4f 93       	push	r20
 95c:	5f 93       	push	r21
 95e:	6f 93       	push	r22
 960:	7f 93       	push	r23
 962:	8f 93       	push	r24
 964:	9f 93       	push	r25
 966:	af 93       	push	r26
 968:	bf 93       	push	r27
 96a:	ef 93       	push	r30
 96c:	ff 93       	push	r31
	
	
	if(INT1_fptr!=NULL_PTR) {
 96e:	e0 91 9e 00 	lds	r30, 0x009E	; 0x80009e <INT1_fptr>
 972:	f0 91 9f 00 	lds	r31, 0x009F	; 0x80009f <INT1_fptr+0x1>
 976:	30 97       	sbiw	r30, 0x00	; 0
 978:	09 f0       	breq	.+2      	; 0x97c <__vector_2+0x30>
		
		INT1_fptr() ;
 97a:	09 95       	icall
	}
	
}
 97c:	ff 91       	pop	r31
 97e:	ef 91       	pop	r30
 980:	bf 91       	pop	r27
 982:	af 91       	pop	r26
 984:	9f 91       	pop	r25
 986:	8f 91       	pop	r24
 988:	7f 91       	pop	r23
 98a:	6f 91       	pop	r22
 98c:	5f 91       	pop	r21
 98e:	4f 91       	pop	r20
 990:	3f 91       	pop	r19
 992:	2f 91       	pop	r18
 994:	0f 90       	pop	r0
 996:	0f be       	out	0x3f, r0	; 63
 998:	0f 90       	pop	r0
 99a:	1f 90       	pop	r1
 99c:	18 95       	reti

0000099e <__vector_3>:




ISR(INT2_vect){
 99e:	1f 92       	push	r1
 9a0:	0f 92       	push	r0
 9a2:	0f b6       	in	r0, 0x3f	; 63
 9a4:	0f 92       	push	r0
 9a6:	11 24       	eor	r1, r1
 9a8:	2f 93       	push	r18
 9aa:	3f 93       	push	r19
 9ac:	4f 93       	push	r20
 9ae:	5f 93       	push	r21
 9b0:	6f 93       	push	r22
 9b2:	7f 93       	push	r23
 9b4:	8f 93       	push	r24
 9b6:	9f 93       	push	r25
 9b8:	af 93       	push	r26
 9ba:	bf 93       	push	r27
 9bc:	ef 93       	push	r30
 9be:	ff 93       	push	r31
	
	
	if(INT2_fptr!=NULL_PTR) {
 9c0:	e0 91 9c 00 	lds	r30, 0x009C	; 0x80009c <__data_end>
 9c4:	f0 91 9d 00 	lds	r31, 0x009D	; 0x80009d <__data_end+0x1>
 9c8:	30 97       	sbiw	r30, 0x00	; 0
 9ca:	09 f0       	breq	.+2      	; 0x9ce <__vector_3+0x30>
		
		INT2_fptr() ;
 9cc:	09 95       	icall
	}
	
}
 9ce:	ff 91       	pop	r31
 9d0:	ef 91       	pop	r30
 9d2:	bf 91       	pop	r27
 9d4:	af 91       	pop	r26
 9d6:	9f 91       	pop	r25
 9d8:	8f 91       	pop	r24
 9da:	7f 91       	pop	r23
 9dc:	6f 91       	pop	r22
 9de:	5f 91       	pop	r21
 9e0:	4f 91       	pop	r20
 9e2:	3f 91       	pop	r19
 9e4:	2f 91       	pop	r18
 9e6:	0f 90       	pop	r0
 9e8:	0f be       	out	0x3f, r0	; 63
 9ea:	0f 90       	pop	r0
 9ec:	1f 90       	pop	r1
 9ee:	18 95       	reti

000009f0 <__vector_12>:
}
void Spi_Set_callBack(void(*localfptr)(void)){
	Spi_Fptr=localfptr;
	
}
ISR(SPI_STC_vect){
 9f0:	1f 92       	push	r1
 9f2:	0f 92       	push	r0
 9f4:	0f b6       	in	r0, 0x3f	; 63
 9f6:	0f 92       	push	r0
 9f8:	11 24       	eor	r1, r1
 9fa:	2f 93       	push	r18
 9fc:	3f 93       	push	r19
 9fe:	4f 93       	push	r20
 a00:	5f 93       	push	r21
 a02:	6f 93       	push	r22
 a04:	7f 93       	push	r23
 a06:	8f 93       	push	r24
 a08:	9f 93       	push	r25
 a0a:	af 93       	push	r26
 a0c:	bf 93       	push	r27
 a0e:	ef 93       	push	r30
 a10:	ff 93       	push	r31
	if(Spi_Fptr!=NULL_PTR){
 a12:	e0 91 a2 00 	lds	r30, 0x00A2	; 0x8000a2 <Spi_Fptr>
 a16:	f0 91 a3 00 	lds	r31, 0x00A3	; 0x8000a3 <Spi_Fptr+0x1>
 a1a:	30 97       	sbiw	r30, 0x00	; 0
 a1c:	09 f0       	breq	.+2      	; 0xa20 <__vector_12+0x30>
		Spi_Fptr();
 a1e:	09 95       	icall
	}
 a20:	ff 91       	pop	r31
 a22:	ef 91       	pop	r30
 a24:	bf 91       	pop	r27
 a26:	af 91       	pop	r26
 a28:	9f 91       	pop	r25
 a2a:	8f 91       	pop	r24
 a2c:	7f 91       	pop	r23
 a2e:	6f 91       	pop	r22
 a30:	5f 91       	pop	r21
 a32:	4f 91       	pop	r20
 a34:	3f 91       	pop	r19
 a36:	2f 91       	pop	r18
 a38:	0f 90       	pop	r0
 a3a:	0f be       	out	0x3f, r0	; 63
 a3c:	0f 90       	pop	r0
 a3e:	1f 90       	pop	r1
 a40:	18 95       	reti

00000a42 <__vector_11>:
	
	Timer2_OVF_Fptr=LocalFptr;
}
void TIMER2_OCA_SetCallBack(void(*LocalFptr)(void))
{
	Timer2_OCA_Fptr=LocalFptr;
 a42:	1f 92       	push	r1
 a44:	0f 92       	push	r0
 a46:	0f b6       	in	r0, 0x3f	; 63
 a48:	0f 92       	push	r0
 a4a:	11 24       	eor	r1, r1
 a4c:	2f 93       	push	r18
 a4e:	3f 93       	push	r19
 a50:	4f 93       	push	r20
 a52:	5f 93       	push	r21
 a54:	6f 93       	push	r22
 a56:	7f 93       	push	r23
 a58:	8f 93       	push	r24
 a5a:	9f 93       	push	r25
 a5c:	af 93       	push	r26
 a5e:	bf 93       	push	r27
 a60:	ef 93       	push	r30
 a62:	ff 93       	push	r31
 a64:	e0 91 ae 00 	lds	r30, 0x00AE	; 0x8000ae <Timer0_OVF_Fptr>
 a68:	f0 91 af 00 	lds	r31, 0x00AF	; 0x8000af <Timer0_OVF_Fptr+0x1>
 a6c:	30 97       	sbiw	r30, 0x00	; 0
 a6e:	09 f0       	breq	.+2      	; 0xa72 <__vector_11+0x30>
 a70:	09 95       	icall
 a72:	ff 91       	pop	r31
 a74:	ef 91       	pop	r30
 a76:	bf 91       	pop	r27
 a78:	af 91       	pop	r26
 a7a:	9f 91       	pop	r25
 a7c:	8f 91       	pop	r24
 a7e:	7f 91       	pop	r23
 a80:	6f 91       	pop	r22
 a82:	5f 91       	pop	r21
 a84:	4f 91       	pop	r20
 a86:	3f 91       	pop	r19
 a88:	2f 91       	pop	r18
 a8a:	0f 90       	pop	r0
 a8c:	0f be       	out	0x3f, r0	; 63
 a8e:	0f 90       	pop	r0
 a90:	1f 90       	pop	r1
 a92:	18 95       	reti

00000a94 <__vector_9>:
 a94:	1f 92       	push	r1
 a96:	0f 92       	push	r0
 a98:	0f b6       	in	r0, 0x3f	; 63
 a9a:	0f 92       	push	r0
 a9c:	11 24       	eor	r1, r1
 a9e:	2f 93       	push	r18
 aa0:	3f 93       	push	r19
 aa2:	4f 93       	push	r20
 aa4:	5f 93       	push	r21
 aa6:	6f 93       	push	r22
 aa8:	7f 93       	push	r23
 aaa:	8f 93       	push	r24
 aac:	9f 93       	push	r25
 aae:	af 93       	push	r26
 ab0:	bf 93       	push	r27
 ab2:	ef 93       	push	r30
 ab4:	ff 93       	push	r31
 ab6:	e0 91 ac 00 	lds	r30, 0x00AC	; 0x8000ac <Timer1_OVF_Fptr>
 aba:	f0 91 ad 00 	lds	r31, 0x00AD	; 0x8000ad <Timer1_OVF_Fptr+0x1>
 abe:	30 97       	sbiw	r30, 0x00	; 0
 ac0:	09 f0       	breq	.+2      	; 0xac4 <__vector_9+0x30>
 ac2:	09 95       	icall
 ac4:	ff 91       	pop	r31
 ac6:	ef 91       	pop	r30
 ac8:	bf 91       	pop	r27
 aca:	af 91       	pop	r26
 acc:	9f 91       	pop	r25
 ace:	8f 91       	pop	r24
 ad0:	7f 91       	pop	r23
 ad2:	6f 91       	pop	r22
 ad4:	5f 91       	pop	r21
 ad6:	4f 91       	pop	r20
 ad8:	3f 91       	pop	r19
 ada:	2f 91       	pop	r18
 adc:	0f 90       	pop	r0
 ade:	0f be       	out	0x3f, r0	; 63
 ae0:	0f 90       	pop	r0
 ae2:	1f 90       	pop	r1
 ae4:	18 95       	reti

00000ae6 <__vector_7>:
 ae6:	1f 92       	push	r1
 ae8:	0f 92       	push	r0
 aea:	0f b6       	in	r0, 0x3f	; 63
 aec:	0f 92       	push	r0
 aee:	11 24       	eor	r1, r1
 af0:	2f 93       	push	r18
 af2:	3f 93       	push	r19
 af4:	4f 93       	push	r20
 af6:	5f 93       	push	r21
 af8:	6f 93       	push	r22
 afa:	7f 93       	push	r23
 afc:	8f 93       	push	r24
 afe:	9f 93       	push	r25
 b00:	af 93       	push	r26
 b02:	bf 93       	push	r27
 b04:	ef 93       	push	r30
 b06:	ff 93       	push	r31
 b08:	e0 91 aa 00 	lds	r30, 0x00AA	; 0x8000aa <Timer1_OCA_Fptr>
 b0c:	f0 91 ab 00 	lds	r31, 0x00AB	; 0x8000ab <Timer1_OCA_Fptr+0x1>
 b10:	30 97       	sbiw	r30, 0x00	; 0
 b12:	09 f0       	breq	.+2      	; 0xb16 <__vector_7+0x30>
 b14:	09 95       	icall
 b16:	ff 91       	pop	r31
 b18:	ef 91       	pop	r30
 b1a:	bf 91       	pop	r27
 b1c:	af 91       	pop	r26
 b1e:	9f 91       	pop	r25
 b20:	8f 91       	pop	r24
 b22:	7f 91       	pop	r23
 b24:	6f 91       	pop	r22
 b26:	5f 91       	pop	r21
 b28:	4f 91       	pop	r20
 b2a:	3f 91       	pop	r19
 b2c:	2f 91       	pop	r18
 b2e:	0f 90       	pop	r0
 b30:	0f be       	out	0x3f, r0	; 63
 b32:	0f 90       	pop	r0
 b34:	1f 90       	pop	r1
 b36:	18 95       	reti

00000b38 <__vector_8>:
 b38:	1f 92       	push	r1
 b3a:	0f 92       	push	r0
 b3c:	0f b6       	in	r0, 0x3f	; 63
 b3e:	0f 92       	push	r0
 b40:	11 24       	eor	r1, r1
 b42:	2f 93       	push	r18
 b44:	3f 93       	push	r19
 b46:	4f 93       	push	r20
 b48:	5f 93       	push	r21
 b4a:	6f 93       	push	r22
 b4c:	7f 93       	push	r23
 b4e:	8f 93       	push	r24
 b50:	9f 93       	push	r25
 b52:	af 93       	push	r26
 b54:	bf 93       	push	r27
 b56:	ef 93       	push	r30
 b58:	ff 93       	push	r31
 b5a:	e0 91 a8 00 	lds	r30, 0x00A8	; 0x8000a8 <Timer1_OCB_Fptr>
 b5e:	f0 91 a9 00 	lds	r31, 0x00A9	; 0x8000a9 <Timer1_OCB_Fptr+0x1>
 b62:	30 97       	sbiw	r30, 0x00	; 0
 b64:	09 f0       	breq	.+2      	; 0xb68 <__vector_8+0x30>
 b66:	09 95       	icall
 b68:	ff 91       	pop	r31
 b6a:	ef 91       	pop	r30
 b6c:	bf 91       	pop	r27
 b6e:	af 91       	pop	r26
 b70:	9f 91       	pop	r25
 b72:	8f 91       	pop	r24
 b74:	7f 91       	pop	r23
 b76:	6f 91       	pop	r22
 b78:	5f 91       	pop	r21
 b7a:	4f 91       	pop	r20
 b7c:	3f 91       	pop	r19
 b7e:	2f 91       	pop	r18
 b80:	0f 90       	pop	r0
 b82:	0f be       	out	0x3f, r0	; 63
 b84:	0f 90       	pop	r0
 b86:	1f 90       	pop	r1
 b88:	18 95       	reti

00000b8a <__vector_6>:
 b8a:	1f 92       	push	r1
 b8c:	0f 92       	push	r0
 b8e:	0f b6       	in	r0, 0x3f	; 63
 b90:	0f 92       	push	r0
 b92:	11 24       	eor	r1, r1
 b94:	2f 93       	push	r18
 b96:	3f 93       	push	r19
 b98:	4f 93       	push	r20
 b9a:	5f 93       	push	r21
 b9c:	6f 93       	push	r22
 b9e:	7f 93       	push	r23
 ba0:	8f 93       	push	r24
 ba2:	9f 93       	push	r25
 ba4:	af 93       	push	r26
 ba6:	bf 93       	push	r27
 ba8:	ef 93       	push	r30
 baa:	ff 93       	push	r31
 bac:	e0 91 a6 00 	lds	r30, 0x00A6	; 0x8000a6 <Timer1_ICU_Fptr>
 bb0:	f0 91 a7 00 	lds	r31, 0x00A7	; 0x8000a7 <Timer1_ICU_Fptr+0x1>
 bb4:	30 97       	sbiw	r30, 0x00	; 0
 bb6:	09 f0       	breq	.+2      	; 0xbba <__vector_6+0x30>
 bb8:	09 95       	icall
 bba:	ff 91       	pop	r31
 bbc:	ef 91       	pop	r30
 bbe:	bf 91       	pop	r27
 bc0:	af 91       	pop	r26
 bc2:	9f 91       	pop	r25
 bc4:	8f 91       	pop	r24
 bc6:	7f 91       	pop	r23
 bc8:	6f 91       	pop	r22
 bca:	5f 91       	pop	r21
 bcc:	4f 91       	pop	r20
 bce:	3f 91       	pop	r19
 bd0:	2f 91       	pop	r18
 bd2:	0f 90       	pop	r0
 bd4:	0f be       	out	0x3f, r0	; 63
 bd6:	0f 90       	pop	r0
 bd8:	1f 90       	pop	r1
 bda:	18 95       	reti

00000bdc <__vector_5>:
}

/*********************************Timer 2 ISR functions*********************************************/
ISR(TIMER2_OVF_vect)
{
 bdc:	1f 92       	push	r1
 bde:	0f 92       	push	r0
 be0:	0f b6       	in	r0, 0x3f	; 63
 be2:	0f 92       	push	r0
 be4:	11 24       	eor	r1, r1
 be6:	2f 93       	push	r18
 be8:	3f 93       	push	r19
 bea:	4f 93       	push	r20
 bec:	5f 93       	push	r21
 bee:	6f 93       	push	r22
 bf0:	7f 93       	push	r23
 bf2:	8f 93       	push	r24
 bf4:	9f 93       	push	r25
 bf6:	af 93       	push	r26
 bf8:	bf 93       	push	r27
 bfa:	ef 93       	push	r30
 bfc:	ff 93       	push	r31
	if(Timer2_OVF_Fptr!=NULL_PTR)
 bfe:	e0 91 a4 00 	lds	r30, 0x00A4	; 0x8000a4 <Timer2_OVF_Fptr>
 c02:	f0 91 a5 00 	lds	r31, 0x00A5	; 0x8000a5 <Timer2_OVF_Fptr+0x1>
 c06:	30 97       	sbiw	r30, 0x00	; 0
 c08:	09 f0       	breq	.+2      	; 0xc0c <__vector_5+0x30>
	{
		Timer2_OVF_Fptr();
 c0a:	09 95       	icall
	}
}
 c0c:	ff 91       	pop	r31
 c0e:	ef 91       	pop	r30
 c10:	bf 91       	pop	r27
 c12:	af 91       	pop	r26
 c14:	9f 91       	pop	r25
 c16:	8f 91       	pop	r24
 c18:	7f 91       	pop	r23
 c1a:	6f 91       	pop	r22
 c1c:	5f 91       	pop	r21
 c1e:	4f 91       	pop	r20
 c20:	3f 91       	pop	r19
 c22:	2f 91       	pop	r18
 c24:	0f 90       	pop	r0
 c26:	0f be       	out	0x3f, r0	; 63
 c28:	0f 90       	pop	r0
 c2a:	1f 90       	pop	r1
 c2c:	18 95       	reti

00000c2e <__vector_15>:
	fptr_RX=local_ptr ;
}



ISR(UART_TX_vect){
 c2e:	1f 92       	push	r1
 c30:	0f 92       	push	r0
 c32:	0f b6       	in	r0, 0x3f	; 63
 c34:	0f 92       	push	r0
 c36:	11 24       	eor	r1, r1
 c38:	2f 93       	push	r18
 c3a:	3f 93       	push	r19
 c3c:	4f 93       	push	r20
 c3e:	5f 93       	push	r21
 c40:	6f 93       	push	r22
 c42:	7f 93       	push	r23
 c44:	8f 93       	push	r24
 c46:	9f 93       	push	r25
 c48:	af 93       	push	r26
 c4a:	bf 93       	push	r27
 c4c:	ef 93       	push	r30
 c4e:	ff 93       	push	r31

	if(fptr_TX!=NULL_PTR){
 c50:	e0 91 b2 00 	lds	r30, 0x00B2	; 0x8000b2 <fptr_TX>
 c54:	f0 91 b3 00 	lds	r31, 0x00B3	; 0x8000b3 <fptr_TX+0x1>
 c58:	30 97       	sbiw	r30, 0x00	; 0
 c5a:	09 f0       	breq	.+2      	; 0xc5e <__vector_15+0x30>
		
		fptr_TX() ;
 c5c:	09 95       	icall
	}
}
 c5e:	ff 91       	pop	r31
 c60:	ef 91       	pop	r30
 c62:	bf 91       	pop	r27
 c64:	af 91       	pop	r26
 c66:	9f 91       	pop	r25
 c68:	8f 91       	pop	r24
 c6a:	7f 91       	pop	r23
 c6c:	6f 91       	pop	r22
 c6e:	5f 91       	pop	r21
 c70:	4f 91       	pop	r20
 c72:	3f 91       	pop	r19
 c74:	2f 91       	pop	r18
 c76:	0f 90       	pop	r0
 c78:	0f be       	out	0x3f, r0	; 63
 c7a:	0f 90       	pop	r0
 c7c:	1f 90       	pop	r1
 c7e:	18 95       	reti

00000c80 <__vector_13>:



ISR(UART_RX_vect){
 c80:	1f 92       	push	r1
 c82:	0f 92       	push	r0
 c84:	0f b6       	in	r0, 0x3f	; 63
 c86:	0f 92       	push	r0
 c88:	11 24       	eor	r1, r1
 c8a:	2f 93       	push	r18
 c8c:	3f 93       	push	r19
 c8e:	4f 93       	push	r20
 c90:	5f 93       	push	r21
 c92:	6f 93       	push	r22
 c94:	7f 93       	push	r23
 c96:	8f 93       	push	r24
 c98:	9f 93       	push	r25
 c9a:	af 93       	push	r26
 c9c:	bf 93       	push	r27
 c9e:	ef 93       	push	r30
 ca0:	ff 93       	push	r31

	if(fptr_RX!=NULL_PTR){
 ca2:	e0 91 b0 00 	lds	r30, 0x00B0	; 0x8000b0 <fptr_RX>
 ca6:	f0 91 b1 00 	lds	r31, 0x00B1	; 0x8000b1 <fptr_RX+0x1>
 caa:	30 97       	sbiw	r30, 0x00	; 0
 cac:	09 f0       	breq	.+2      	; 0xcb0 <__vector_13+0x30>
		
		fptr_RX() ;
 cae:	09 95       	icall
	}
}
 cb0:	ff 91       	pop	r31
 cb2:	ef 91       	pop	r30
 cb4:	bf 91       	pop	r27
 cb6:	af 91       	pop	r26
 cb8:	9f 91       	pop	r25
 cba:	8f 91       	pop	r24
 cbc:	7f 91       	pop	r23
 cbe:	6f 91       	pop	r22
 cc0:	5f 91       	pop	r21
 cc2:	4f 91       	pop	r20
 cc4:	3f 91       	pop	r19
 cc6:	2f 91       	pop	r18
 cc8:	0f 90       	pop	r0
 cca:	0f be       	out	0x3f, r0	; 63
 ccc:	0f 90       	pop	r0
 cce:	1f 90       	pop	r1
 cd0:	18 95       	reti

00000cd2 <__udivmodsi4>:
 cd2:	a1 e2       	ldi	r26, 0x21	; 33
 cd4:	1a 2e       	mov	r1, r26
 cd6:	aa 1b       	sub	r26, r26
 cd8:	bb 1b       	sub	r27, r27
 cda:	fd 01       	movw	r30, r26
 cdc:	0d c0       	rjmp	.+26     	; 0xcf8 <__udivmodsi4_ep>

00000cde <__udivmodsi4_loop>:
 cde:	aa 1f       	adc	r26, r26
 ce0:	bb 1f       	adc	r27, r27
 ce2:	ee 1f       	adc	r30, r30
 ce4:	ff 1f       	adc	r31, r31
 ce6:	a2 17       	cp	r26, r18
 ce8:	b3 07       	cpc	r27, r19
 cea:	e4 07       	cpc	r30, r20
 cec:	f5 07       	cpc	r31, r21
 cee:	20 f0       	brcs	.+8      	; 0xcf8 <__udivmodsi4_ep>
 cf0:	a2 1b       	sub	r26, r18
 cf2:	b3 0b       	sbc	r27, r19
 cf4:	e4 0b       	sbc	r30, r20
 cf6:	f5 0b       	sbc	r31, r21

00000cf8 <__udivmodsi4_ep>:
 cf8:	66 1f       	adc	r22, r22
 cfa:	77 1f       	adc	r23, r23
 cfc:	88 1f       	adc	r24, r24
 cfe:	99 1f       	adc	r25, r25
 d00:	1a 94       	dec	r1
 d02:	69 f7       	brne	.-38     	; 0xcde <__udivmodsi4_loop>
 d04:	60 95       	com	r22
 d06:	70 95       	com	r23
 d08:	80 95       	com	r24
 d0a:	90 95       	com	r25
 d0c:	9b 01       	movw	r18, r22
 d0e:	ac 01       	movw	r20, r24
 d10:	bd 01       	movw	r22, r26
 d12:	cf 01       	movw	r24, r30
 d14:	08 95       	ret

00000d16 <__divmodsi4>:
 d16:	05 2e       	mov	r0, r21
 d18:	97 fb       	bst	r25, 7
 d1a:	1e f4       	brtc	.+6      	; 0xd22 <__divmodsi4+0xc>
 d1c:	00 94       	com	r0
 d1e:	0e 94 a2 06 	call	0xd44	; 0xd44 <__negsi2>
 d22:	57 fd       	sbrc	r21, 7
 d24:	07 d0       	rcall	.+14     	; 0xd34 <__divmodsi4_neg2>
 d26:	0e 94 69 06 	call	0xcd2	; 0xcd2 <__udivmodsi4>
 d2a:	07 fc       	sbrc	r0, 7
 d2c:	03 d0       	rcall	.+6      	; 0xd34 <__divmodsi4_neg2>
 d2e:	4e f4       	brtc	.+18     	; 0xd42 <__divmodsi4_exit>
 d30:	0c 94 a2 06 	jmp	0xd44	; 0xd44 <__negsi2>

00000d34 <__divmodsi4_neg2>:
 d34:	50 95       	com	r21
 d36:	40 95       	com	r20
 d38:	30 95       	com	r19
 d3a:	21 95       	neg	r18
 d3c:	3f 4f       	sbci	r19, 0xFF	; 255
 d3e:	4f 4f       	sbci	r20, 0xFF	; 255
 d40:	5f 4f       	sbci	r21, 0xFF	; 255

00000d42 <__divmodsi4_exit>:
 d42:	08 95       	ret

00000d44 <__negsi2>:
 d44:	90 95       	com	r25
 d46:	80 95       	com	r24
 d48:	70 95       	com	r23
 d4a:	61 95       	neg	r22
 d4c:	7f 4f       	sbci	r23, 0xFF	; 255
 d4e:	8f 4f       	sbci	r24, 0xFF	; 255
 d50:	9f 4f       	sbci	r25, 0xFF	; 255
 d52:	08 95       	ret

00000d54 <_exit>:
 d54:	f8 94       	cli

00000d56 <__stop_program>:
 d56:	ff cf       	rjmp	.-2      	; 0xd56 <__stop_program>
